{
  "task": "Audit synesthetic-mcp repo state from code",
  "objective": "Compare the actual implementation and tests against the founding prompt (meta/prompts/init_mcp_repo.json) and spec (docs/mcp_spec.md). Report strictly what is present, missing, or intentionally divergent.",
  "constraints": {
    "style": "deterministic, terse, Markdown headings with bullet points or tables",
    "rules": [
      "Ground all findings in visible code or tests",
      "Mark functionality not present as Missing",
      "Mark intentional design differences as Divergent",
      "No speculation about unseen behavior",
      "Recommendations must be actionable code/test/doc changes only"
    ],
    "sections": [
      "Summary of repo state (high-level files, deps, submodule presence)",
      "Top gaps & fixes (3-5 bullets up front)",
      "Alignment with init prompt (bullet list, file:line evidence)",
      "Alignment with spec (table: Spec item → Status → Evidence)",
      "Test coverage and CI (table: Feature → Tested? → Evidence)",
      "Dependencies and runtime (table: Package → Used in → Required/Optional)",
      "Environment variables (bullets: name, default, fallback behavior)",
      "Documentation accuracy (bullets: README vs. code)",
      "Detected divergences (prompt vs. spec vs. code)",
      "Recommendations (concrete next steps)"
    ],
    "scope": {
      "files": [
        "README.md",
        "docs/mcp_spec.md",
        "requirements.txt",
        "mcp/*.py",
        "tests/*.py",
        ".github/workflows/*"
      ],
      "focus": [
        "implemented functions and modules",
        "test assertions and coverage",
        "schema/example discovery paths",
        "validation logic and alias handling",
        "backend env gating",
        "error handling",
        "diff implementation",
        "entrypoint behavior",
        "dependency usage"
      ]
    },
    "output": {
      "path": "meta/output/mcp_state.md",
      "format": "Markdown"
    }
  },
  "exit_criteria": [
    "meta/output/mcp_state.md exists",
    "Report uses bullets/tables consistently for scanability",
    "Spec features mapped to Present / Missing / Divergent in a table",
    "Test coverage summarized by feature in a table",
    "Dependencies mapped to imports in a table",
    "Env vars listed with defaults and fallbacks",
    "README instructions verified against actual code"
  ]
}
