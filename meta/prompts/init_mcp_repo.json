{
  "task": "Initialize synesthetic-mcp repo",
  "objective": "Create a lightweight Python MCP server that adapts synesthetic-schemas into resources (schemas, examples) and tools (validate_asset, diff_assets, populate_backend) per the pinned spec.",
  "constraints": {
    "language": "Python (>=3.11, tested 3.11â€“3.13)",
    "style": "KISS, deterministic, minimal deps",
    "schemas": "Consume generated Python bindings from synesthetic-schemas",
    "runtime": "Reproducible dev via Nix flake (matches synesthetic-schemas), with pip+requirements.txt fast path and Poetry optional",
    "output_structure": "Match README.md layout with docs/, mcp/, tests/, meta/prompts/",
    "validation": "Use jsonschema + Pydantic v2 for schema validation",
    "diff": "Implement RFC6902 JSON Patch ops (minimal)",
    "backend": "Proxy POSTs to backend API; mockable in tests",
    "tests": "pytest, golden fixtures for valid/invalid assets"
  },
  "references": {
    "spec": "docs/mcp_spec.md (pinned v1 spec with version:0.1.0, owner:delk73, lastReviewed:2025-09-12)",
    "readme": "README.md in repo root (documents structure, includes canonical frontmatter, and notes on meta/prompts/)"
  },
  "phases": [
    "Scaffold repo layout per README.md",
    "Stub mcp/core.py, validate.py, diff.py, backend.py",
    "Implement stdio_main.py and optional http_main.py",
    "Write tests with fixtures for validate/diff/tools",
    "Integrate synesthetic-schemas as submodule",
    "Add docs/mcp_spec.md with spec text and frontmatter"
  ],
  "exit_criteria": [
    "Repo builds and runs in Python",
    "All tests pass locally and in CI",
    "Spec and README.md match implementation",
    "meta/prompts/init_mcp_repo.json saved for provenance"
  ]
}
