{
  "task": "Initialize synesthetic-mcp repo (minimal, testable)",
  "objective": "Create a small, deterministic MCP adapter with working imports and tests. Keep dependencies minimal and behavior fully specified.",
  "constraints": {
    "language": "Python (>=3.11)",
    "style": "KISS, deterministic, minimal deps",
    "schemas": "Read JSON Schemas and examples from disk; allow env overrides",
    "runtime": "Environment-agnostic; must work after `pip install -r requirements.txt && pip install -e .`",
    "output_structure": "README.md, docs/mcp_spec.md, mcp/*.py, tests/*, requirements.txt, meta/prompts/",
    "jsonschema": "Draft 2020-12 with proper base-URI $ref resolution",
    "diff": "RFC6902 with add/remove/replace only; RFC6901 pointers; deterministic list handling",
    "backend": "Disabled unless SYN_BACKEND_URL is set; httpx timeout 5s; no retries; fully mockable",
    "tests": "pytest with golden fixtures; no sys.path hacks; require editable install",
    "limits": "1 MiB max payload; read-only FS except reading schemas/examples"
  },
  "io_contracts": {
    "tools": {
      "list_schemas": { "in": {}, "out": {"ok":"bool","schemas":[{"name":"str","version":"str","path":"str"}]} },
      "get_schema": { "in": {"name":"str"}, "out": {"ok":"bool","schema":"object","version":"str"} },
      "list_examples": { "in": {"component":"str|*"}, "out": {"ok":"bool","examples":[{"component":"str","path":"str"}]} },
      "get_example": { "in": {"path":"str"}, "out": {"ok":"bool","example":"object","schema":"str","validated":"bool"} },
      "validate_asset": { "in": {"asset":"object","schema":"str"}, "out": {"ok":"bool","errors":[{"path":"str","msg":"str"}]} },
      "diff_assets": { "in": {"base":"object","new":"object"}, "out": {"ok":"bool","patch":[{"op":"str","path":"str","value?":"any"}]} },
      "populate_backend": { "in": {"asset":"object","validate_first":"bool"}, "out_ok": {"ok":"bool","asset_id":"str","backend_url":"str"}, "out_err": {"ok":"bool","reason":"validation_failed|backend_error|unsupported","errors?":"array","status?":"int","detail?":"str"} }
    },
    "errors": ["validation_failed","backend_error","unsupported"]
  },
  "env": {
    "SYN_SCHEMAS_DIR": "default=tests/fixtures/schemas",
    "SYN_EXAMPLES_DIR": "default=tests/fixtures/examples",
    "SYN_BACKEND_URL": "optional; required to enable populate_backend"
  },
  "files_required": [
    "requirements.txt (jsonschema, pydantic, httpx, pytest, ruff, mypy)",
    "mcp/__init__.py (defines __version__)",
    "mcp/core.py (discovery: list_schemas, list_examples; deterministic sorting)",
    "mcp/validate.py (jsonschema draft 2020-12; sorted error paths)",
    "mcp/diff.py (RFC6902 add/remove/replace; deterministic; list handling as specified)",
    "mcp/backend.py (httpx client; disabled without SYN_BACKEND_URL; 5s timeout)",
    "mcp/stdio_main.py (minimal JSON-RPC loop wiring the tools)",
    "mcp/http_main.py (FastAPI app factory; optional import)",
    "tests/test_validate.py (valid/invalid fixtures)",
    "tests/test_diff.py (idempotence; list replacement case)",
    "tests/test_backend.py (mocked httpx success/error)",
    "tests/test_env_discovery.py (env overrides for dirs)",
    "tests/fixtures/schemas/asset.schema.json",
    "tests/fixtures/examples/asset.valid.json",
    "tests/fixtures/examples/asset.invalid.json",
    "docs/mcp_spec.md (provided spec text, updated with dialect, determinism, limits)",
    "meta/prompts/init_mcp_repo.json (this prompt)"
  ],
  "phases": [
    "Scaffold files and minimal implementations that satisfy IO contracts",
    "Ensure `pip install -e .` makes `import mcp` work (no sys.path hacks)",
    "Write tests first; implement to pass; keep output sorted/deterministic",
    "Keep populate_backend behind env flag and fully mockable",
    "Pin requirements; no Poetry/Nix files"
  ],
  "exit_criteria": [
    "`pip install -r requirements.txt && pip install -e .` completes",
    "`pytest -q` passes",
    "`python -c \"import mcp; print(mcp.__version__)\"` prints spec version",
    "All list/error outputs are deterministically ordered",
    "docs/mcp_spec.md matches implementation"
  ]
}
