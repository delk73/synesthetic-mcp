{
  "task": "Harden shutdown logging and test robustness",
  "objective": "Ensure shutdown logs are always observable before process exit, fixing CI race conditions.",
  "changes": [
    {
      "id": "flush_shutdown_logs",
      "description": "Explicitly flush stderr after each shutdown log event.",
      "edits": [
        {
          "file": "mcp/__main__.py",
          "pattern": "_log_event\\(",
          "multiple": true,
          "replacement": "_log_event("
        },
        {
          "file": "mcp/__main__.py",
          "pattern": "shutdown_logged = True",
          "multiple": true,
          "replacement": "shutdown_logged = True\n            try:\n                sys.stderr.flush()\n            except Exception:\n                pass"
        }
      ]
    },
    {
      "id": "robust_wait_for_line",
      "description": "Update _wait_for_line to keep draining stderr even if proc.poll() is non-None, giving shutdown log time to flush.",
      "edits": [
        {
          "file": "tests/conftest.py",
          "pattern": "def _wait_for_line",
          "multiple": false,
          "replacement": "def _wait_for_line(stream, proc, needle: str, timeout: float = 10.0) -> str:\n    import time\n    deadline = time.time() + timeout\n    lines = []\n    while time.time() < deadline:\n        line = stream.readline()\n        if not line:\n            # Even if process exited, give stderr time to flush\n            if proc.poll() is not None:\n                time.sleep(0.05)\n                continue\n            time.sleep(0.05)\n            continue\n        text = line.strip()\n        lines.append(text)\n        if needle in text:\n            return text\n    raise AssertionError(f\"did not observe '{needle}' in output: {lines}\")"
        }
      ]
    }
  ],
  "constraints": {
    "rules": [
      "Do not add new dependencies.",
      "Only modify the listed files.",
      "Ensure changes remain backward-compatible with existing tests.",
      "Shutdown logs must be flushed synchronously."
    ]
  },
  "exit_criteria": [
    "Shutdown logs are flushed explicitly and observed reliably.",
    "All transports emit shutdown logs before exit.",
    "_wait_for_line drains stderr after process exit to reduce race conditions.",
    "All tests pass under the local dev Python version." 
  ]
}