{
  "task": "Enforce JSON Schema standard key in MCP (require top-level \"$schema\")",
  "objective": "Make MCP strict validation conform to v0.2.8: assets MUST include top-level \"$schema\"; reject legacy \"schema\" and \"$schemaRef\". Update validator, docs, fixtures, and tests accordingly.",
  "changes": [
    {
      "id": "validator_require_dollar_schema",
      "description": "Require top-level \"$schema\"; reject legacy keys; return validation_failed with path=\"/$schema\" when missing.",
      "edits": [
        {
          "file": "mcp/validate.py",
          "pattern": "(def validate_asset\\(.*?\\):[\\s\\S]*?)(# start validation)",
          "multiple": false,
          "replacement": "\\1\n    # v0.2.8: enforce JSON Schema standard key\n    if \"$schema\" not in asset or not asset.get(\"$schema\"):\n        return _fail(\"validation_failed\", path=\"/$schema\", msg=\"top-level $schema is required\")\n    # legacy keys are rejected explicitly\n    if \"schema\" in asset or \"$schemaRef\" in asset:\n        return _fail(\"validation_failed\", path=\"/$schema\", msg=\"use '$schema' only; 'schema' and '$schemaRef' are not allowed\")\n\n    # start validation"
        },
        {
          "file": "mcp/validate.py",
          "pattern": "(def validate_many\\(.*?\\):[\\s\\S]*?for asset in assets:[\\s\\S]*?)(# validate each)",
          "multiple": false,
          "replacement": "\\1\n        # pre-check contract per v0.2.8\n        if \"$schema\" not in asset or not asset.get(\"$schema\"):\n            results.append(_fail(\"validation_failed\", path=\"/$schema\", msg=\"top-level $schema is required\"))\n            continue\n        if \"schema\" in asset or \"$schemaRef\" in asset:\n            results.append(_fail(\"validation_failed\", path=\"/$schema\", msg=\"use '$schema' only; 'schema' and '$schemaRef' are not allowed\"))\n            continue\n        # validate each"
        }
      ]
    },
    {
      "id": "core_example_inference_drop_legacy",
      "description": "Stop inferring from legacy schema keys; rely solely on '$schema'.",
      "edits": [
        {
          "file": "mcp/core.py",
          "pattern": "if ['\\\"]\\$schemaRef['\\\"] in obj[\\s\\S]*?\\n",
          "multiple": true,
          "replacement": ""
        },
        {
          "file": "mcp/core.py",
          "pattern": "if ['\\\"]schema['\\\"] in obj[\\s\\S]*?\\n",
          "multiple": true,
          "replacement": ""
        }
      ]
    },
    {
      "id": "tests_add_enforcement_cases",
      "description": "Add tests that enforce required $schema and rejection of legacy keys.",
      "edits": [
        {
          "file": "tests/test_validate.py",
          "pattern": "\\Z",
          "multiple": false,
          "replacement": "\n\ndef test_reject_missing_dollar_schema():\n    asset = {\"prompt\": \"x\"}\n    res = client.validate_asset(asset)\n    assert res[\"reason\"] == \"validation_failed\"\n    assert res[\"errors\"][0][\"path\"] == \"/$schema\"\n\n\ndef test_reject_legacy_schema_and_schemaRef():\n    for a in [{\"schema\": \"meta/schemas/synesthetic-asset.schema.json#/SynestheticAsset\"},\n              {\"$schemaRef\": \"meta/schemas/synesthetic-asset.schema.json#/SynestheticAsset\"}]:\n        res = client.validate_asset(a)\n        assert res[\"reason\"] == \"validation_failed\"\n        assert res[\"errors\"][0][\"path\"] == \"/$schema\"\n"
        }
      ]
    },
    {
      "id": "update_golden_transcript",
      "description": "Switch golden fixtures to use $schema and remove legacy keys.",
      "edits": [
        {
          "file": "tests/fixtures/golden.jsonl",
          "pattern": "\"schema\"\\s*:\\s*\"[^\"]+\"",
          "multiple": true,
          "replacement": "\"$schema\": \"meta/schemas/synesthetic-asset.schema.json#/SynestheticAsset\""
        },
        {
          "file": "tests/fixtures/golden.jsonl",
          "pattern": "\"\\$schemaRef\"\\s*:\\s*\"[^\"]+\",?\\s*",
          "multiple": true,
          "replacement": ""
        }
      ]
    },
    {
      "id": "update_readme_examples",
      "description": "Replace \"schema\" with \"$schema\" in README examples and CLI docs.",
      "edits": [
        {
          "file": "README.md",
          "pattern": "(\"schema\"\\s*:)\\s*\"[^\"]+\"",
          "multiple": true,
          "replacement": "\"$schema\": \"meta/schemas/synesthetic-asset.schema.json#/SynestheticAsset\""
        }
      ]
    },
    {
      "id": "update_spec_anchor_note",
      "description": "Reiterate $schema requirement and explicitly forbid legacy keys.",
      "edits": [
        {
          "file": "docs/mcp_spec.md",
          "pattern": "Schema key:[\\s\\S]*?(?=\\n\\n|$)",
          "multiple": false,
          "replacement": "Schema key: Assets MUST include a top-level `\"$schema\"` field (JSON Schema Draft 2020-12). MCP validators MUST reject assets missing this field and MUST reject legacy `schema` or `$schemaRef` keys."
        }
      ]
    },
    {
      "id": "sync_example_assets_submodule",
      "description": "Ensure bundled examples declare $schema and no legacy keys.",
      "edits": [
        {
          "file": "libs/synesthetic-schemas/examples/SynestheticAsset_Example1.json",
          "pattern": "\"\\$schemaRef\"\\s*:\\s*\"[^\"]+\"",
          "multiple": true,
          "replacement": "\"$schema\": \"meta/schemas/synesthetic-asset.schema.json#/SynestheticAsset\""
        },
        {
          "file": "libs/synesthetic-schemas/examples/SynestheticAsset_Example1.json",
          "pattern": "\"schema\"\\s*:\\s*\"[^\"]+\",?\\s*",
          "multiple": true,
          "replacement": ""
        }
      ]
    }
  ],
  "constraints": {
    "rules": [
      "No new dependencies.",
      "Only modify the listed files.",
      "Strictly enforce $schema; do not auto-alias or auto-upgrade legacy keys.",
      "Tests and docs must reflect the v0.2.8 contract.",
      "Deterministic behavior and existing transport guards must remain unchanged."
    ]
  },
  "exit_criteria": [
    "Assets missing top-level \"$schema\" are rejected with validation_failed at path=\"/$schema\".",
    "Assets containing legacy \"schema\" or \"$schemaRef\" are rejected with validation_failed.",
    "All README examples and golden fixtures use \"$schema\".",
    "New tests pass; no failures in existing transport/lifecycle suites.",
    "Audit table row 'Assets MUST include top-level $schema; reject schema/$schemaRef' flips to Present with evidence in mcp_state.md."
  ]
}
