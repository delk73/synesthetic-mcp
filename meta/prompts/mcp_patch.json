{
  "version": "v0.2.9-phase1-followup",
  "spec_ref": "docs/mcp_spec.md#v0-2-9",
  "task": "Finalize Phase 1 MCP audit corrections and documentation synchronization",
  "objective": "Resolve documentation drift, add CLI parity for governance tools, and validate remote schema fallback coverage.",
  "changes": [
    {
      "id": "add_cli_audit_schemas_flags",
      "description": "Add --audit and --schemas flags to MCP CLI for governance parity and schema listing per spec §118–124.",
      "edits": [
        {
          "file": "mcp/__main__.py",
          "pattern": "if __name__ == ['\"]__main__['\"]:",
          "multiple": false,
          "replacement": "parser.add_argument('--audit', action='store_true', help='Run governance audit and print compliance summary')\n    parser.add_argument('--schemas', action='store_true', help='List cached or available schema URLs')\n    args = parser.parse_args()\n\n    if args.audit:\n        from mcp.core import governance_audit\n        result = governance_audit()\n        print(json.dumps(result, indent=2))\n        sys.exit(0)\n    if args.schemas:\n        from mcp.core import list_schemas\n        result = list_schemas()\n        print(json.dumps(result, indent=2))\n        sys.exit(0)\n\n    if __name__ == \"__main__\":"
        }
      ]
    },
    {
      "id": "fix_readme_port_example",
      "description": "Update README TCP nc example to match active MCP_PORT=8765 environment default.",
      "edits": [
        {
          "file": "README.md",
          "pattern": "nc 127\\.0\\.0\\.1 7000",
          "multiple": true,
          "replacement": "nc 127.0.0.1 8765"
        }
      ]
    },
    {
      "id": "add_labs_schema_cache_dir_docs",
      "description": "Add LABS_SCHEMA_CACHE_DIR documentation to spec and environment tables for clarity and consistency.",
      "edits": [
        {
          "file": "docs/mcp_spec.md",
          "pattern": "LABS_SCHEMA_VERSION=.*",
          "multiple": false,
          "replacement": "LABS_SCHEMA_VERSION=0.7.3\nLABS_SCHEMA_CACHE_DIR=~/.cache/synesthetic-schemas  # optional schema cache directory"
        }
      ]
    },
    {
      "id": "test_remote_schema_cache_fallback",
      "description": "Introduce a regression test verifying remote schema retrieval and caching fallback when local file missing.",
      "edits": [
        {
          "file": "tests/test_validate.py",
          "pattern": "\\Z",
          "multiple": false,
          "replacement": "\n\ndef test_remote_schema_cache_fallback(monkeypatch, tmp_path):\n    from mcp import validate\n    monkeypatch.setenv('LABS_SCHEMA_BASE', 'https://delk73.github.io/synesthetic-schemas/schema/')\n    monkeypatch.setenv('LABS_SCHEMA_VERSION', '0.7.3')\n    test_url = 'https://delk73.github.io/synesthetic-schemas/schema/0.7.3/synesthetic-asset.schema.json'\n    tmp_cache = tmp_path / 'cache'\n    monkeypatch.setenv('LABS_SCHEMA_CACHE_DIR', str(tmp_cache))\n    result = validate._fetch_canonical_schema(test_url, 'synesthetic-asset.schema.json')\n    assert isinstance(result, dict)\n    assert tmp_cache.joinpath('synesthetic-asset.schema.json').exists()"
        }
      ]
    }
  ],
  "constraints": {
    "rules": [
      "CLI must expose governance and schema listing parity via argparse.",
      "Documentation must match active environment defaults (MCP_PORT=8765).",
      "LABS_SCHEMA_CACHE_DIR must be described in both README and mcp_spec.md.",
      "Remote schema fetch and caching fallback must have passing test coverage."
    ]
  },
  "exit_criteria": [
    "mcp --audit and mcp --schemas return valid JSON outputs",
    "README and docs/mcp_spec.md ports and env tables consistent with .env.example",
    "LABS_SCHEMA_CACHE_DIR documented and recognized by runtime",
    "All tests pass including remote schema cache fallback"
  ]
}
