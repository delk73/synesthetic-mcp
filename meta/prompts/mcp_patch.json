{
  "version": "v0.2.9-followup",
  "spec_ref": "docs/mcp_spec.md#v0-2-9",
  "task": "Restore environment-based schema interpolation and prevent hardcoding in examples",
  "objective": "Ensure $schema in examples uses LABS_SCHEMA_BASE and LABS_SCHEMA_VERSION dynamically, not fixed URLs. Validator and generator must construct full URLs at runtime only.",
  "changes": [
    {
      "id": "revert_hardcoded_schema_urls",
      "description": "Revert submodule example files to environment-interpolated $schema paths instead of hardcoded version URLs.",
      "edits": [
        {
          "file": "libs/synesthetic-schemas/examples/*.json",
          "pattern": "\"\\$schema\":\\s*\"[^\"]+\"",
          "multiple": true,
          "replacement": "\"$schema\": \"${LABS_SCHEMA_BASE}${LABS_SCHEMA_VERSION}/synesthetic-asset.schema.json\""
        }
      ]
    },
    {
      "id": "enforce_runtime_schema_resolution",
      "description": "Modify validator to resolve $schema placeholders using environment at runtime.",
      "edits": [
        {
          "file": "mcp/validate.py",
          "pattern": "schema_path\\s*=.*",
          "multiple": false,
          "replacement": "LABS_SCHEMA_BASE = os.getenv('LABS_SCHEMA_BASE', 'https://delk73.github.io/synesthetic-schemas/schema/')\n        LABS_SCHEMA_VERSION = os.getenv('LABS_SCHEMA_VERSION', '0.7.3')\n        schema_field = asset.get('$schema', '')\n        if schema_field.startswith('http'):\n            schema_path = schema_field\n        elif schema_field.startswith('${LABS_SCHEMA_BASE}'):\n            schema_path = schema_field.replace('${LABS_SCHEMA_BASE}', LABS_SCHEMA_BASE).replace('${LABS_SCHEMA_VERSION}', LABS_SCHEMA_VERSION)\n        else:\n            schema_path = f\"{LABS_SCHEMA_BASE}{LABS_SCHEMA_VERSION}/{os.path.basename(schema_field or 'synesthetic-asset.schema.json')}\""
        }
      ]
    },
    {
      "id": "add_schema_interpolation_test",
      "description": "Add regression test to verify schema placeholder resolution and environment override correctness.",
      "edits": [
        {
          "file": "tests/test_validate.py",
          "pattern": "\\Z",
          "multiple": false,
          "replacement": "\n\ndef test_schema_placeholder_resolution(monkeypatch):\n    from mcp import validate\n    monkeypatch.setenv('LABS_SCHEMA_BASE', 'https://delk73.github.io/synesthetic-schemas/schema/')\n    monkeypatch.setenv('LABS_SCHEMA_VERSION', '0.7.3')\n    asset = {'$schema': '${LABS_SCHEMA_BASE}${LABS_SCHEMA_VERSION}/synesthetic-asset.schema.json'}\n    schema_path = validate._resolve_schema_path(asset)\n    assert schema_path == 'https://delk73.github.io/synesthetic-schemas/schema/0.7.3/synesthetic-asset.schema.json'"
        }
      ]
    }
  ],
  "constraints": {
    "rules": [
      "Example files must remain version-agnostic and rely on runtime environment interpolation.",
      "Validator must expand LABS_SCHEMA_BASE and LABS_SCHEMA_VERSION placeholders deterministically.",
      "No hardcoded schema URLs in committed examples.",
      "All tests must pass under both default and overridden LABS_SCHEMA_* environments."
    ]
  },
  "exit_criteria": [
    "No examples contain fixed 0.7.x URLs in $schema field",
    "mcp/validate.py resolves schema URLs using environment variables",
    "New test passes confirming placeholder resolution",
    "governance_audit still reports status=ok"
  ]
}
