{
  "task": "Purge legacy 'schema' param from MCP and enforce top-level '$schema'",
  "objective": "Remove schema argument plumbing, stop requiring schema in stdio, and drop payload.setdefault('schema'). All validation must rely solely on asset['$schema'] per v0.2.8.",
  "changes": [
    {
      "id": "validator_drop_schema_arg",
      "description": "Remove schema argument from validate_asset/validate_many; use only asset['$schema'].",
      "edits": [
        {
          "file": "mcp/validate.py",
          "pattern": "def validate_asset\\(asset: Dict\\[str, Any\\], schema: str \\| None\\) -> Dict\\[str, Any\\]:",
          "multiple": false,
          "replacement": "def validate_asset(asset: Dict[str, Any]) -> Dict[str, Any]:"
        },
        {
          "file": "mcp/validate.py",
          "pattern": "def validate_many\\(assets: List\\[Dict\\[str, Any\\]\\] \\| None, schema: str \\| None\\) -> Dict\\[str, Any\\]:",
          "multiple": false,
          "replacement": "def validate_many(assets: List[Dict[str, Any]] | None) -> Dict[str, Any]:"
        },
        {
          "file": "mcp/validate.py",
          "pattern": "if not schema:[\\s\\S]*?schema_required",
          "multiple": true,
          "replacement": "if \"$schema\" not in asset:\n        return {\"ok\": False, \"reason\": \"validation_failed\", \"errors\": [{\"path\": \"/$schema\", \"msg\": \"top-level $schema is required\"}]}"
        }
      ]
    },
    {
      "id": "stdio_remove_schema_param",
      "description": "Stop requiring 'schema' in stdio params.",
      "edits": [
        {
          "file": "mcp/stdio_main.py",
          "pattern": "if \\\"schema\\\" not in params[\\s\\S]*?return validate_many\\(params.get\\(\"assets\"), params.get\\(\"schema\"\\)\\)",
          "multiple": false,
          "replacement": "return validate_many(params.get(\"assets\"))"
        },
        {
          "file": "mcp/stdio_main.py",
          "pattern": "schema = params\\[\"schema\"\\][\\s\\S]*?return validate_asset\\(asset, schema\\)",
          "multiple": false,
          "replacement": "return validate_asset(asset)"
        }
      ]
    },
    {
      "id": "drop_payload_setdefault",
      "description": "Remove backfill of legacy schema field in responses.",
      "edits": [
        {
          "file": "mcp/__main__.py",
          "pattern": "payload.setdefault\\(\"schema\", schema\\)",
          "multiple": false,
          "replacement": ""
        }
      ]
    },
    {
      "id": "tests_update_calls",
      "description": "Update tests to call validate_asset/validate_many without schema param and fixtures to use $schema only.",
      "edits": [
        {
          "file": "tests/test_stdio.py",
          "pattern": "\"schema\":",
          "multiple": true,
          "replacement": "\"$schema\":"
        },
        {
          "file": "tests/test_tcp.py",
          "pattern": "\"schema\":",
          "multiple": true,
          "replacement": "\"$schema\":"
        },
        {
          "file": "tests/test_entrypoint.py",
          "pattern": "\"schema\":",
          "multiple": true,
          "replacement": "\"$schema\":"
        }
      ]
    }
  ],
  "constraints": {
    "rules": [
      "No new dependencies.",
      "Remove all references to legacy 'schema' param.",
      "Validation must rely solely on $schema in asset object.",
      "Update tests/fixtures to reflect $schema-only contract."
    ]
  },
  "exit_criteria": [
    "No function signatures take schema arg.",
    "stdio_main.py does not require schema param.",
    "__main__.py no longer sets payload['schema'].",
    "All tests pass with assets containing $schema only.",
    "Audit row 'Assets MUST include top-level $schema; reject schema/$schemaRef' marked Present."
  ]
}
