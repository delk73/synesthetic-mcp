{
  "task": "Patch validate_asset schema enforcement",
  "objective": "Ensure validate_asset fails if schema param is missing or empty, per MCP Spec v0.2.4",
  "constraints": {
    "style": "minimal, deterministic",
    "files": ["mcp/stdio_main.py", "tests/test_stdio.py"],
    "rules": [
      "Do not introduce new dependencies",
      "Do not change unrelated code",
      "Return JSON-RPC style error object when schema param missing"
    ]
  },
  "edits": [
    {
      "file": "mcp/stdio_main.py",
      "pattern": "if method in \\(\"validate\", \"validate_asset\"\\):([\\s\\S]*?)return validate_asset\\(asset, schema\\)",
      "replacement": "if method in (\"validate\", \"validate_asset\"):\n        asset = params.get(\"asset\", {})\n        if \"schema\" not in params or not params[\"schema\"]:\n            return {\n                \"ok\": False,\n                \"reason\": \"validation_failed\",\n                \"errors\": [{\"path\": \"/schema\", \"msg\": \"schema param is required\"}]\n            }\n        schema = params[\"schema\"]\n        return validate_asset(asset, schema)"
    },
    {
      "file": "tests/test_stdio.py",
      "pattern": "(def test_validate_asset_.*)",
      "multiple": false,
      "replacement": "def test_validate_asset_requires_schema(tmp_path):\n    from subprocess import Popen, PIPE\n    import json, sys\n\n    proc = Popen([sys.executable, \"-m\", \"mcp\"], stdin=PIPE, stdout=PIPE, text=True)\n    req = {\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"validate_asset\", \"params\": {\"asset\": {}}}\n    stdout, _ = proc.communicate(json.dumps(req) + \"\\n\", timeout=5)\n    resp = json.loads(stdout.strip())\n    assert resp[\"result\"][\"ok\"] is False\n    assert resp[\"result\"][\"reason\"] == \"validation_failed\"\n    assert any(err[\"msg\"] == \"schema param is required\" for err in resp[\"result\"][\"errors\"])"
    }
  ]
}
